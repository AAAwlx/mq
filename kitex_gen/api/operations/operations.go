// Code generated by Kitex v0.4.2. DO NOT EDIT.

package operations

import (
	api "ClyMQ/kitex_gen/api"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return operationsServiceInfo
}

var operationsServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Operations"
	handlerType := (*api.Operations)(nil)
	methods := map[string]kitex.MethodInfo{
		"push": kitex.NewMethodInfo(pushHandler, newOperationsPushArgs, newOperationsPushResult, false),
		"pull": kitex.NewMethodInfo(pullHandler, newOperationsPullArgs, newOperationsPullResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.2",
		Extra:           extra,
	}
	return svcInfo
}

func pushHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.OperationsPushArgs)
	realResult := result.(*api.OperationsPushResult)
	success, err := handler.(api.Operations).Push(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOperationsPushArgs() interface{} {
	return api.NewOperationsPushArgs()
}

func newOperationsPushResult() interface{} {
	return api.NewOperationsPushResult()
}

func pullHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.OperationsPullArgs)
	realResult := result.(*api.OperationsPullResult)
	success, err := handler.(api.Operations).Pull(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOperationsPullArgs() interface{} {
	return api.NewOperationsPullArgs()
}

func newOperationsPullResult() interface{} {
	return api.NewOperationsPullResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Push(ctx context.Context, req *api.PushRequest) (r *api.PushResponse, err error) {
	var _args api.OperationsPushArgs
	_args.Req = req
	var _result api.OperationsPushResult
	if err = p.c.Call(ctx, "push", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Pull(ctx context.Context, req *api.PullRequest) (r *api.PullResponse, err error) {
	var _args api.OperationsPullArgs
	_args.Req = req
	var _result api.OperationsPullResult
	if err = p.c.Call(ctx, "pull", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
